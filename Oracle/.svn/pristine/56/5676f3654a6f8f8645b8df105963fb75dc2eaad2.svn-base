package mis.action;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import mis.dao.OracleDAO;
import mis.dao.UserDAO;
import mis.entity.User;

import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.factory.annotation.Autowired;

import sun.org.mozilla.javascript.internal.json.JsonParser;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.google.common.base.Preconditions;
import com.opensymphony.xwork2.ActionContext;

import common.BaseAction;
import common.Md5Utils;

//业务处理Action

//action是多实例的，对每一个请求都会new一个action,所以不必担心，参数会冲突
@SuppressWarnings("serial")
@Results( { @Result(name = "login", location = "/login.jsp"),                              //登录
	        @Result(name = "main", location = "/WEB-INF/main.jsp"),                        //主页
	        @Result(name = "mainpage", location = "/WEB-INF/mainpage.jsp"),                //首页
	        @Result(name = "userinfo", location = "/WEB-INF/userinfo.jsp"),                //个人资料
	        @Result(name = "usermanager", location = "/WEB-INF/usermanager.jsp")           //用户管理
	        
	})
public class UserAction extends BaseAction {
	// ///////////////////////////////////////////////////////////////引入的DAO
	//spring自动注入
	@Autowired  
	private  HttpServletRequest request; 
	@Autowired
	private UserDAO dao;
	@Autowired
	private OracleDAO odao;
	private File qExcle;
	private Map<String, Object> jdata;
	
	
	// ///////////////////////////////////////////////////////////////属性参数
	private List<User> list;

	// 拿实体类当组合参数，实际上是它的属性帮我们传参了，常用
	private User entity;            //用户实体

	// ///////////////////////////////////////////////////////////////业务逻辑方法
 
	//登录
	public String login() throws Exception {		       
	    //密码用了md5加密
	    User u=dao.login(entity.getUsername(),entity.getPassword());  //查找用户
	    
	    if(u==null)
	    {
	    	request.setAttribute("msg", "用户名或密码错误");
	        return "login";	        
	    }
	    else
	    {
	    	if(u.getUserType().equals("user"))
	    	{
	    		request.setAttribute("msg", "你不是管理员，不能登录!");
		        return "login";
	    	}else{
	    		ActionContext ac = ActionContext.getContext();
				//使用Map模拟HttpSession
				Map<String,Object> sess = ac.getSession();
				sess.put("user", u);                                             //当前登录用户
		    	return "main";
	    	}
	    }
	}
	
	//App登录
	public void applogin() throws Exception {	
		HttpServletRequest request = ServletActionContext.getRequest(); 
	    //密码用了md5加密
	    String username=request.getParameter("username");
	    String password=request.getParameter("password");
	    	
	    User u=dao.login(username,password);  //查找用户
	    if(u==null)
	    {
	    	getResponse().getWriter().write("false");        
	    }
	    else
	    {
	    	if(u.getUserType().equals("admin"))                      //是不是管理员
	    	{
	    		getResponse().getWriter().write("admin");            
	    	}else{
	    		System.err.print(JSON.toJSONString(u));
	    		getResponse().getWriter().write(JSON.toJSONString(u));
	    	}
	    }
	}
	
	//App用修改资料
	public void appupdate() throws Exception {
		HttpServletRequest request = ServletActionContext.getRequest(); 
	    //密码用了md5加密
		String userid=request.getParameter("id");                     //用户id
		String username=request.getParameter("username");
		String password=request.getParameter("password");
		String phone=request.getParameter("phone");
		String userType=request.getParameter("userType");
		String type=request.getParameter("type");

		User user=new User();
		user=dao.get(Integer.valueOf(userid));
		user.setUsername(username);
		user.setPassword(password);
		user.setPhone(phone);
        user.setUserType(userType);
        user.setType(type);   
        dao.update(user);
        
        getResponse().getWriter().write("操作成功");
	}
	
	//添加
	public void add() throws Exception {		       
	    //密码用了md5加密
	    User u = entity;
	    u.setType("a");
	    dao.add(u);
	    getResponse().sendRedirect("user!usermanager.action");
	}
	//添加
	public void addMore() throws Exception {		
		if(qExcle!=null)
		{
			System.out.printf("-------------addMore start----------");
			
			//User u = entity;
		    //u.setType("a");
		    //dao.add(u);
		    
		}
		
	    
	    getResponse().sendRedirect("user!usermanager.action");
	}
	//删除
	public void del() throws Exception {		       
	    dao.delete(entity.getId());
	    getResponse().sendRedirect("user!usermanager.action");
	}
	//修改
	public void edit() throws Exception {		       
	    dao.update(entity);
	    getResponse().sendRedirect("user!usermanager.action");
	}
	//修改密码
	public void changePw() throws Exception {		  
		try{
			int id = Integer.parseInt(getRequest().getParameter("id"));
			String newpw = getRequest().getParameter("npw");
			User u = dao.get(id);
			u.setPassword(newpw);
			dao.update(u);
			getResponse().getWriter().write("true");
		}
		catch(Exception e){
			getResponse().getWriter().write("false");
		}
	  
	}
	
	
	//首页
	public String mainpage() throws Exception{
		return "mainpage";
	}
	
	//个人资料
	public String userinfo() throws Exception{
		User u = getSession().getAttribute("user")==null?new User():(User)getSession().getAttribute("user");
		getRequest().setAttribute("users", u);
		return "userinfo";
	}
	
	//用户管理
	public String usermanager() throws Exception{
		getRequest().setAttribute("users", dao.listall());
		System.err.println(JSON.toJSONString(dao.listall()));    //查看有没有错误
		return "usermanager";
	}
	
	

	
	
	
	//退出
	public String logout() throws Exception 
	{
	    getSession().setAttribute("user", null);
	    return "login";
	 }
	
	////////////////////////////////////////////////////////////////////实现get/set
	public List<User> getList() {
		return list;
	}

	public void setList(List<User> list) {
		this.list = list;
	}

	public User getEntity() {
		return entity;
	}

	public void setEntity(User entity) {
		this.entity = entity;
	}
	
	public Map<String, Object> getJdata() {
        return jdata;
	}
	
	public void setJdata(Map<String, Object> jdata) {
        this.jdata = jdata;
	}
}
